1684871313
waR3U4bTeM%3A892f3f7fbfbc662f072949408a8c08ae-bae9d57fcd2c10e85835baca0d6022d6
s:12008:"O:33:"phpDocumentor\Reflection\Php\File":14:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"bae9d57fcd2c10e85835baca0d6022d6";s:39:" phpDocumentor\Reflection\Php\File name";s:13:"termsCond.php";s:39:" phpDocumentor\Reflection\Php\File path";s:25:"landingPage/termsCond.php";s:41:" phpDocumentor\Reflection\Php\File source";s:8099:"<?php require("../funciones/reutilizables.inc.php")?>

<!DOCTYPE html>
<html lang="es">
<head>
    <?=cabeceraPaginasLanding()?>
</head>
<body id="pagCookies">
    <?=cabeceraLandingPage()?>
    <div class="titPagsInternas">
        <h1>POLÍTICA DE PRIVACIDAD</h1>
    </div>
    <div class="contenedorPagsInternas">
        <div class="textoPoliticas">
            <p>Condiciones de utilización y aceptación de las mismas</p>

            <h3>Obligaciones del Usuario</h3>
            <hr>

            <p>
                Por la utilización del Portal www.domotizate.site  Vd. adquiere la condición de Usuario. Tanto la visita como la utilización del portal,
                suponen la aceptación como Usuario, sin reservas de ninguna clase, a todas y cada una de Condiciones Generales.
            </p>
            <p>
                El Usuario queda supeditado a los principios de Legalidad, Buena Fe y Orden Público, por lo que responderá de la veracidad de los datos que facilite.
                Será, por lo tanto, único responsable de las falsedades o inexactitudes que realice y de los daños y perjuicios a DOMOTIZATE o terceros y que puedan derivarse
                de las mismas.
            </p>
            <p>El Usuario reconoce y acepta que la utilización de la página Web y de sus servicios se realiza bajo su entera responsabilidad.</p>
            <p>Queda prohibido reproducir, distribuir, modificar o copiar el contenido de esta página, salvo que de disponga de la autorización del titular del dominio.</p>
            <p>
                Los menores de edad deberán obtener el permiso de sus padres, tutores o representantes legales para poder acceder a los servicios prestados.
                DOMOTIZATE no se responsabiliza en el caso de que los datos sobre este tema sean inexactos o falsos.
            </p>
            <p>
                DOMOTIZATE  no será responsable de los enlaces  a otras páginas de Internet de terceros, ni tampoco de las infracciones de los derechos de terceros en las que dichas
                páginas pudieran incurrir y su existencia no implica que DOMOTIZATE apruebe o acepte sus contenidos y servicios.
            </p>
        
            <h3>Protección de Datos</h3>
            <hr>
            <p>
                DOMOTIZATE garantiza la confidencialidad de los datos personales facilitados a través de esta web de conformidad con la ley orgánica 15/1999 de 13 de Diciembre de 1999,
                de Protección de datos de Carácter Personal (LOPD). Los datos suministrados por el usuario quedarán incorporados en un fichero automatizado,
                el cual será procesado exclusivamente para la finalidad descrita. Estos se recogerán a través de los formularios correspondientes, los cuales solo contendrán los campos
                imprescindibles para poder prestar el servicio requerido por el usuario.
            </p>
            <p>
                Los datos de carácter personal serán tratados con el grado de protección adecuado, según el Real Decreto 1720/2007, tomándose las medidas de seguridad necesarias
                para evitar su alteración, perdida, tratamiento o acceso no autorizado por parte de terceros que lo puedan utilizar para finalidades distintas para las que han sido
                solicitadas por el usuario. DOMOTIZATE no realiza cesión de datos a terceros.
            </p>
            
            <h3>Propiedad Industrial e  Intelectual</h3>
            <hr>
            <p>
                Todos los contenidos incluidos en la página Web y en particular las marcas, nombres comerciales, diseños industriales, diseños, textos, fotografías, gráficos,
                logotipos, iconos, software o cualesquiera otros signos susceptibles de utilización industrial y comercial están protegidos por derechos de propiedad industrial e
                intelectual de DOMOTIZATE
            </p>
            <p>
                DOMOTIZATE no será responsable de la infracción de los derechos de propiedad intelectual o industrial de terceros que pudieran derivarse de la inclusión en la página
                Web de marcas, nombres comerciales, diseños, textos, fotografías, gráficos, logotipos, iconos o software pertenecientes a terceros que hayan declarado ser titulares
                de los mismos al incluirlos en la página Web. Tampoco se hace responsable de las opiniones y comentarios vertidos por los usuarios en sus blogs o redes sociales sin
                perjuicio de las acciones que pueda ejercitar para eliminar dichas opiniones y comentarios cuando resulten contrarias a la Ley.
            </p>
            <p>
                En aquellos apartados de la web en los que los usuarios puedan aportar contenidos, DOMOTIZATE se reserva el derecho de suprimir aquellos que puedan afectar
                negativamente a sus marcas o ser contrarios a la Ley, el orden público o las buenas costumbres.
            </p>

            <p>
                DOMOTIZATE podrá utilizar los contenidos facilitados por los usuarios (fotografías, videos, etc) de forma razonable y con estricto respeto a los derechos de
                propiedad intelectual.
            </p>
            <p>DOMOTIZATE autoriza el establecimiento de vínculos a su Portal desde cualesquiera otras páginas Web.</p>
            <p>
                Los enlaces que se establezcan deberán siempre hacerse a la página principal de DOMOTIZATE siendo dicho enlace absoluto y completo de forma que le lleve al
                Usuario al sitio de DOMOTIZATE que deberá abarcar completamente toda la extensión de la pantalla de la página principal.
            </p>
            <p>
                DOMOTIZATE no será responsable del contenido de las páginas Web de destino que se establezcan mediante vínculos en la página Web ni tampoco de las infracciones de
                derechos de terceros en las que dichas páginas pudieran incurrir.
            </p>
            
            <h3>Responsabilidad de DOMOTIZATE</h3>
            <hr>
            <p>
                DOMOTIZATE únicamente responderá de los daños que el Usuario pueda sufrir como consecuencia de la utilización de la página Web cuando dichos daños sean imputables
                a una actuación dolosa de DOMOTIZATE.
            </p>
            <p>
                No obstante, DOMOTIZATE declará haber adoptado todas las medidas necesarias, dentro de sus posibilidades y del estado de la tecnología, para garantizar el
                funcionamiento de la página Web y evitar la existencia y transmisión de virus y otros componentes que puedan perjudicar al Usuario.
            </p>


            <h3>Ley Aplicable y Jurisdicción</h3>
            <hr>
            <p>
                Trataremos de resolver cualquier desacuerdo rápida y eficientemente. Si no está de acuerdo con la forma en que tratamos cualquier desacuerdo y quiere interponer
                acciones legales, deberá Ud. hacerlo en España, aplicándose la ley española.
            </p>
            <p>
                Las relaciones establecidas entre el Usuario y el titular de la página Web se regirán por lo dispuesto en la normativa vigente acerca de la legislación aplicable
                y la jurisdicción competente.
            </p>


            <h3>General</h3>
            <hr>
            <p>
                La no exigencia de cumplimiento de cualquier término de este Contrato, ya sea por su parte o por la nuestra, no constituye renuncia a dicho término.
                Ello no afectará en modo alguno el derecho de dicha parte de hacer cumplir dicho término con posterioridad.
            </p>
            <p>La invalidez o ineficacia de cualquier cláusula del Contrato no afectará adversamente a la validez ni al cumplimiento de las restantes cláusulas.</p>

        </div>
       
    </div>
    <?=piePagLandingPage()?>
</body>
</html>";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:0:{}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}s:40:" phpDocumentor\Reflection\Php\File enums";a:0:{}s:43:" phpDocumentor\Reflection\Php\File metadata";a:0:{}}";